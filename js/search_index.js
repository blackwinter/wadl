var search_data = {"index":{"searchIndex":["wadl","address","application","cli","cheapschema","documentation","fault","faultformat","faults","httpmethod","httprequest","httpresponse","hasdocs","link","option","param","representationcontainer","representationformat","requestformat","resource","resourceandaddress","resourcecontainer","resourcetype","resources","response","responseformat","uriparts","version","xmlrepresentation","%()","%()","==()","_deep_copy_array()","_deep_copy_hash()","add_param()","address()","address()","api()","as_collection()","as_member()","auth()","auth()","auth_resource()","basic_auth_resource()","bind()","bind()","bind!()","bind!()","build()","call()","contents_are_mixed_data()","deep_copy()","default()","defaults()","define_dereferencing_accessors()","define_http_methods()","define_singleton()","dereference()","dereference_with_context()","dereference_with_context()","dereferencing_attr_accessor()","dereferencing_instance_accessor()","each_attribute()","each_by_param()","each_collection()","each_http_method()","each_member()","embedded_param_names()","execute()","execute()","finalize_creation()","finalize_creation()","find_by_id()","find_form()","find_method_by_http_method()","find_method_by_id()","find_representation_by_media_type()","find_resource()","find_resource()","find_resource_by_path()","find_resource_by_path()","find_resource_by_path()","finish()","format()","from_element()","from_element()","from_wadl()","generic_opts()","get_by_param()","has_attributes()","has_many()","has_one()","has_required()","has_required_or_attributes()","hash()","id()","in_document()","inherit()","inherited()","init()","inspect()","inspect()","inspect()","inspect()","is_form_representation?()","lookup_param()","make_request()","matches?()","may_be_reference()","may_be_reference?()","method_missing()","new()","new()","new()","new()","new()","new()","new()","oauth_header()","oauth_resource()","oauthorize()","opts()","parse_arguments()","parse_options()","parse_query()","paths()","post_opts()","prepare_request()","query_string()","repeating?()","representation_for()","representation_of()","require_oauth()","required?()","reset()","resource()","resource()","resource()","resource()","resource_and_address()","response()","run()","set_headers()","set_oauth_header()","start()","started?()","subclass()","to_a()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","uri()","uri()","uri()","uri()","uri_escape()","usage()","valid_oauth_args?()","with_basic_auth()","with_oauth()","copying","changelog","readme"],"longSearchIndex":["wadl","wadl::address","wadl::application","wadl::cli","wadl::cheapschema","wadl::documentation","wadl::fault","wadl::faultformat","wadl::faults","wadl::httpmethod","wadl::httprequest","wadl::httpresponse","wadl::hasdocs","wadl::link","wadl::option","wadl::param","wadl::representationcontainer","wadl::representationformat","wadl::requestformat","wadl::resource","wadl::resourceandaddress","wadl::resourcecontainer","wadl::resourcetype","wadl::resources","wadl::response","wadl::responseformat","wadl::uriparts","wadl::version","wadl::xmlrepresentation","wadl::param#%()","wadl::representationformat#%()","wadl::uriparts#==()","wadl::address#_deep_copy_array()","wadl::address#_deep_copy_hash()","wadl::cli#add_param()","wadl::resource#address()","wadl::resourceandaddress#address()","wadl::cli#api()","wadl::cheapschema::as_collection()","wadl::cheapschema::as_member()","wadl::address#auth()","wadl::resourceandaddress#auth()","wadl::cli#auth_resource()","wadl::cli#basic_auth_resource()","wadl::resource#bind()","wadl::resourceandaddress#bind()","wadl::address#bind!()","wadl::resourceandaddress#bind!()","wadl::responseformat#build()","wadl::httpmethod#call()","wadl::cheapschema::contents_are_mixed_data()","wadl::address#deep_copy()","wadl::param::default()","wadl::cli::defaults()","wadl::cheapschema::define_dereferencing_accessors()","wadl::resource::define_http_methods()","wadl::hasdocs#define_singleton()","wadl::cheapschema#dereference()","wadl::cheapschema#dereference_with_context()","wadl::resource#dereference_with_context()","wadl::cheapschema::dereferencing_attr_accessor()","wadl::cheapschema::dereferencing_instance_accessor()","wadl::cheapschema#each_attribute()","wadl::xmlrepresentation#each_by_param()","wadl::cheapschema#each_collection()","wadl::resource#each_http_method()","wadl::cheapschema#each_member()","wadl::address::embedded_param_names()","wadl::httprequest::execute()","wadl::httprequest#execute()","wadl::application#finalize_creation()","wadl::resourcecontainer#finalize_creation()","wadl::resource#find_by_id()","wadl::representationcontainer#find_form()","wadl::resource#find_method_by_http_method()","wadl::resource#find_method_by_id()","wadl::representationcontainer#find_representation_by_media_type()","wadl::application#find_resource()","wadl::resourceandaddress#find_resource()","wadl::application#find_resource_by_path()","wadl::resourceandaddress#find_resource_by_path()","wadl::resourcecontainer#find_resource_by_path()","wadl::httprequest#finish()","wadl::param#format()","wadl::cheapschema::from_element()","wadl::faultformat::from_element()","wadl::application::from_wadl()","wadl::cli#generic_opts()","wadl::xmlrepresentation#get_by_param()","wadl::cheapschema::has_attributes()","wadl::cheapschema::has_many()","wadl::cheapschema::has_one()","wadl::cheapschema::has_required()","wadl::cheapschema::has_required_or_attributes()","wadl::uriparts#hash()","wadl::resourceandaddress#id()","wadl::cheapschema::in_document()","wadl::cheapschema::inherit()","wadl::cheapschema::inherited()","wadl::cheapschema::init()","wadl::address#inspect()","wadl::param#inspect()","wadl::resourceandaddress#inspect()","wadl::uriparts#inspect()","wadl::representationformat#is_form_representation?()","wadl::xmlrepresentation#lookup_param()","wadl::httprequest#make_request()","wadl::cheapschema#matches?()","wadl::cheapschema::may_be_reference()","wadl::cheapschema::may_be_reference?()","wadl::resourceandaddress#method_missing()","wadl::address::new()","wadl::cheapschema::new()","wadl::fault::new()","wadl::httprequest::new()","wadl::httpresponse::new()","wadl::resource::new()","wadl::resourceandaddress::new()","wadl::httprequest::oauth_header()","wadl::cli#oauth_resource()","wadl::cli#oauthorize()","wadl::cli#opts()","wadl::cli#parse_arguments()","wadl::cli#parse_options()","wadl::cli#parse_query()","wadl::cheapschema#paths()","wadl::cli#post_opts()","wadl::httprequest#prepare_request()","wadl::uriparts#query_string()","wadl::param#repeating?()","wadl::resource#representation_for()","wadl::xmlrepresentation#representation_of()","wadl::require_oauth()","wadl::param#required?()","wadl::cli#reset()","wadl::application#resource()","wadl::cli#resource()","wadl::resourceandaddress#resource()","wadl::resourcecontainer#resource()","wadl::resource#resource_and_address()","wadl::httpmethod#response()","wadl::cli#run()","wadl::httprequest#set_headers()","wadl::httprequest#set_oauth_header()","wadl::httprequest#start()","wadl::httprequest#started?()","wadl::faultformat#subclass()","wadl::version::to_a()","wadl::address#to_s()","wadl::cheapschema#to_s()","wadl::resourceandaddress#to_s()","wadl::uriparts#to_s()","wadl::version::to_s()","wadl::uriparts#to_str()","wadl::address#uri()","wadl::requestformat#uri()","wadl::resource#uri()","wadl::resourceandaddress#uri()","wadl::param#uri_escape()","wadl::cli::usage()","wadl::httprequest::valid_oauth_args?()","wadl::resource#with_basic_auth()","wadl::resource#with_oauth()","","",""],"info":[["WADL","","WADL.html","",""],["WADL::Address","","WADL/Address.html","","<p>The Address class keeps track of the user&#39;s path through a resource\ngraph. Values for WADL parameters …\n"],["WADL::Application","","WADL/Application.html","",""],["WADL::CLI","","WADL/CLI.html","",""],["WADL::CheapSchema","","WADL/CheapSchema.html","","<p>A cheap way of defining an XML schema as Ruby classes and then parsing\ndocuments into instances of those …\n"],["WADL::Documentation","","WADL/Documentation.html","",""],["WADL::Fault","","WADL/Fault.html","",""],["WADL::FaultFormat","","WADL/FaultFormat.html","",""],["WADL::Faults","","WADL/Faults.html","","<p>A container for application-specific faults\n"],["WADL::HTTPMethod","","WADL/HTTPMethod.html","",""],["WADL::HTTPRequest","","WADL/HTTPRequest.html","",""],["WADL::HTTPResponse","","WADL/HTTPResponse.html","",""],["WADL::HasDocs","","WADL/HasDocs.html","",""],["WADL::Link","","WADL/Link.html","",""],["WADL::Option","","WADL/Option.html","",""],["WADL::Param","","WADL/Param.html","",""],["WADL::RepresentationContainer","","WADL/RepresentationContainer.html","","<p>A mixin for objects that contain representations\n"],["WADL::RepresentationFormat","","WADL/RepresentationFormat.html","",""],["WADL::RequestFormat","","WADL/RequestFormat.html","",""],["WADL::Resource","","WADL/Resource.html","",""],["WADL::ResourceAndAddress","","WADL/ResourceAndAddress.html","","<p>A resource bound beneath a certain address. Used to keep track of a path\nthrough a twisting resource …\n"],["WADL::ResourceContainer","","WADL/ResourceContainer.html","","<p>A mixin for objects that contain resources. If you include this, be sure to\nalias :find_resource to :find_resource_autogenerated …\n"],["WADL::ResourceType","","WADL/ResourceType.html","","<p>A type of resource. Basically a mixin of methods and params for actual\nresources.\n"],["WADL::Resources","","WADL/Resources.html","",""],["WADL::Response","","WADL/Response.html","",""],["WADL::ResponseFormat","","WADL/ResponseFormat.html","",""],["WADL::URIParts","","WADL/URIParts.html","","<p>Classes to keep track of the logical structure of a URI.\n"],["WADL::Version","","WADL/Version.html","",""],["WADL::XMLRepresentation","","WADL/XMLRepresentation.html","","<p>A module mixed in to REXML documents to make them representations in the\nWADL sense.\n"],["%","WADL::Param","WADL/Param.html#method-i-25","(value, name = nil, style = nil)",""],["%","WADL::RepresentationFormat","WADL/RepresentationFormat.html#method-i-25","(values)","<p>Creates a representation by plugging a set of parameters into a\nrepresentation format.\n"],["==","WADL::URIParts","WADL/URIParts.html#method-i-3D-3D","(x)",""],["_deep_copy_array","WADL::Address","WADL/Address.html#method-i-_deep_copy_array","(o)",""],["_deep_copy_hash","WADL::Address","WADL/Address.html#method-i-_deep_copy_hash","(o)",""],["add_param","WADL::CLI","WADL/CLI.html#method-i-add_param","(params, key, value)",""],["address","WADL::Resource","WADL/Resource.html#method-i-address","(working_address = nil)","<p>Returns an Address object refering to this resource\n"],["address","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-address","()",""],["api","WADL::CLI","WADL/CLI.html#method-i-api","()",""],["as_collection","WADL::CheapSchema","WADL/CheapSchema.html#method-c-as_collection","(collection_name)",""],["as_member","WADL::CheapSchema","WADL/CheapSchema.html#method-c-as_member","(member_name)",""],["auth","WADL::Address","WADL/Address.html#method-i-auth","(header, value)",""],["auth","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-auth","(header, value)",""],["auth_resource","WADL::CLI","WADL/CLI.html#method-i-auth_resource","()",""],["basic_auth_resource","WADL::CLI","WADL/CLI.html#method-i-basic_auth_resource","()",""],["bind","WADL::Resource","WADL/Resource.html#method-i-bind","(args = {})","<p>Returns a ResourceAndAddress object bound to this resource and the given\nquery variables.\n"],["bind","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-bind","(*args)",""],["bind!","WADL::Address","WADL/Address.html#method-i-bind-21","(args = {})","<p>Binds some or all of the unbound variables in this address to values.\n"],["bind!","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-bind-21","(args = {})",""],["build","WADL::ResponseFormat","WADL/ResponseFormat.html#method-i-build","(http_response)","<p>Builds a service response object out of an HTTPResponse object.\n"],["call","WADL::HTTPMethod","WADL/HTTPMethod.html#method-i-call","(resource, args = {})","<p>Args:\n\n<pre>:path - Values for path parameters\n:query - Values for query parameters\n:headers - Values for header ...</pre>\n"],["contents_are_mixed_data","WADL::CheapSchema","WADL/CheapSchema.html#method-c-contents_are_mixed_data","()",""],["deep_copy","WADL::Address","WADL/Address.html#method-i-deep_copy","()","<p>Perform a deep copy.\n"],["default","WADL::Param","WADL/Param.html#method-c-default","()","<p>A default Param object to use for a path parameter that is only specified\nas a name in the path of a …\n"],["defaults","WADL::CLI","WADL/CLI.html#method-c-defaults","()",""],["define_dereferencing_accessors","WADL::CheapSchema","WADL/CheapSchema.html#method-c-define_dereferencing_accessors","(symbols, getter, setter)",""],["define_http_methods","WADL::Resource","WADL/Resource.html#method-c-define_http_methods","(klass = self, methods = %w[head get post put delete])","<p>Methods for reading or writing this resource\n"],["define_singleton","WADL::HasDocs","WADL/HasDocs.html#method-i-define_singleton","(r, sym, method)","<p>Convenience method to define a no-argument singleton method on this object.\n"],["dereference","WADL::CheapSchema","WADL/CheapSchema.html#method-i-dereference","()","<p>A null implementation so that foo.dereference will always return the “real”\nobject.\n"],["dereference_with_context","WADL::CheapSchema","WADL/CheapSchema.html#method-i-dereference_with_context","(referent)","<p>This object is a reference to another object. This method returns an object\nthat acts like the other …\n"],["dereference_with_context","WADL::Resource","WADL/Resource.html#method-i-dereference_with_context","(child)",""],["dereferencing_attr_accessor","WADL::CheapSchema","WADL/CheapSchema.html#method-c-dereferencing_attr_accessor","(*symbols)",""],["dereferencing_instance_accessor","WADL::CheapSchema","WADL/CheapSchema.html#method-c-dereferencing_instance_accessor","(*symbols)",""],["each_attribute","WADL::CheapSchema","WADL/CheapSchema.html#method-i-each_attribute","()",""],["each_by_param","WADL::XMLRepresentation","WADL/XMLRepresentation.html#method-i-each_by_param","(param_name)","<p>Yields up each XML element for the given Param object.\n"],["each_collection","WADL::CheapSchema","WADL/CheapSchema.html#method-i-each_collection","()",""],["each_http_method","WADL::Resource","WADL/Resource.html#method-i-each_http_method","()","<p>Find HTTP methods in this resource and in the mixed-in types\n"],["each_member","WADL::CheapSchema","WADL/CheapSchema.html#method-i-each_member","()",""],["embedded_param_names","WADL::Address","WADL/Address.html#method-c-embedded_param_names","(fragment)",""],["execute","WADL::HTTPRequest","WADL/HTTPRequest.html#method-c-execute","(uri, *args)",""],["execute","WADL::HTTPRequest","WADL/HTTPRequest.html#method-i-execute","(*args)",""],["finalize_creation","WADL::Application","WADL/Application.html#method-i-finalize_creation","()",""],["finalize_creation","WADL::ResourceContainer","WADL/ResourceContainer.html#method-i-finalize_creation","()",""],["find_by_id","WADL::Resource","WADL/Resource.html#method-i-find_by_id","(id)",""],["find_form","WADL::RepresentationContainer","WADL/RepresentationContainer.html#method-i-find_form","()",""],["find_method_by_http_method","WADL::Resource","WADL/Resource.html#method-i-find_method_by_http_method","(action)",""],["find_method_by_id","WADL::Resource","WADL/Resource.html#method-i-find_method_by_id","(id)",""],["find_representation_by_media_type","WADL::RepresentationContainer","WADL/RepresentationContainer.html#method-i-find_representation_by_media_type","(type)",""],["find_resource","WADL::Application","WADL/Application.html#method-i-find_resource","(symbol, *args, &block)",""],["find_resource","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-find_resource","(*args, &block)",""],["find_resource_by_path","WADL::Application","WADL/Application.html#method-i-find_resource_by_path","(symbol, *args, &block)",""],["find_resource_by_path","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-find_resource_by_path","(*args, &block)",""],["find_resource_by_path","WADL::ResourceContainer","WADL/ResourceContainer.html#method-i-find_resource_by_path","(path, auto_dereference = nil)",""],["finish","WADL::HTTPRequest","WADL/HTTPRequest.html#method-i-finish","()",""],["format","WADL::Param","WADL/Param.html#method-i-format","(value, name = nil, style = nil)","<p>Validates and formats a proposed value for this parameter. Returns the\nformatted value. Raises an ArgumentError …\n"],["from_element","WADL::CheapSchema","WADL/CheapSchema.html#method-c-from_element","(parent, element, need_finalization)","<p>Turn an XML element into an instance of this class.\n"],["from_element","WADL::FaultFormat","WADL/FaultFormat.html#method-c-from_element","(*args)","<p>Define a custom subclass for this fault, so that the programmer can rescue\nthis particular fault.\n"],["from_wadl","WADL::Application","WADL/Application.html#method-c-from_wadl","(wadl)",""],["generic_opts","WADL::CLI","WADL/CLI.html#method-i-generic_opts","(opts)",""],["get_by_param","WADL::XMLRepresentation","WADL/XMLRepresentation.html#method-i-get_by_param","(param_name)","<p>Returns an XML element for the given Param object.\n"],["has_attributes","WADL::CheapSchema","WADL/CheapSchema.html#method-c-has_attributes","(*names)",""],["has_many","WADL::CheapSchema","WADL/CheapSchema.html#method-c-has_many","(*classes)",""],["has_one","WADL::CheapSchema","WADL/CheapSchema.html#method-c-has_one","(*classes)",""],["has_required","WADL::CheapSchema","WADL/CheapSchema.html#method-c-has_required","(*names)",""],["has_required_or_attributes","WADL::CheapSchema","WADL/CheapSchema.html#method-c-has_required_or_attributes","(names, var)",""],["hash","WADL::URIParts","WADL/URIParts.html#method-i-hash","(x)",""],["id","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-id","()","<p>The id method is not delegated, because it&#39;s the name of a (deprecated)\nbuilt-in Ruby method. We …\n"],["in_document","WADL::CheapSchema","WADL/CheapSchema.html#method-c-in_document","(element_name)",""],["inherit","WADL::CheapSchema","WADL/CheapSchema.html#method-c-inherit","(from)",""],["inherited","WADL::CheapSchema","WADL/CheapSchema.html#method-c-inherited","(klass)",""],["init","WADL::CheapSchema","WADL/CheapSchema.html#method-c-init","()",""],["inspect","WADL::Address","WADL/Address.html#method-i-inspect","()",""],["inspect","WADL::Param","WADL/Param.html#method-i-inspect","()",""],["inspect","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-inspect","()",""],["inspect","WADL::URIParts","WADL/URIParts.html#method-i-inspect","()",""],["is_form_representation?","WADL::RepresentationFormat","WADL/RepresentationFormat.html#method-i-is_form_representation-3F","()",""],["lookup_param","WADL::XMLRepresentation","WADL/XMLRepresentation.html#method-i-lookup_param","(name)",""],["make_request","WADL::HTTPRequest","WADL/HTTPRequest.html#method-i-make_request","(method)",""],["matches?","WADL::CheapSchema","WADL/CheapSchema.html#method-i-matches-3F","(name)","<p>Returns whether or not the given name matches this object. By default,\nchecks the index key for this …\n"],["may_be_reference","WADL::CheapSchema","WADL/CheapSchema.html#method-c-may_be_reference","()",""],["may_be_reference?","WADL::CheapSchema","WADL/CheapSchema.html#method-c-may_be_reference-3F","()",""],["method_missing","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-method_missing","(name, *args, &block)","<p>method_missing is to catch generated methods that don&#39;t get delegated.\n"],["new","WADL::Address","WADL/Address.html#method-c-new","(path_fragments = [], query_vars = [], headers = {}, path_params = {}, query_params = {}, header_params = {})",""],["new","WADL::CheapSchema","WADL/CheapSchema.html#method-c-new","()",""],["new","WADL::Fault","WADL/Fault.html#method-c-new","(code, headers, representation, format)",""],["new","WADL::HTTPRequest","WADL/HTTPRequest.html#method-c-new","(uri)",""],["new","WADL::HTTPResponse","WADL/HTTPResponse.html#method-c-new","(res)",""],["new","WADL::Resource","WADL/Resource.html#method-c-new","(*args)",""],["new","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-c-new","(resource, address = nil, combine_address_with_resource = true)",""],["oauth_header","WADL::HTTPRequest","WADL/HTTPRequest.html#method-c-oauth_header","(args)",""],["oauth_resource","WADL::CLI","WADL/CLI.html#method-i-oauth_resource","()",""],["oauthorize","WADL::CLI","WADL/CLI.html#method-i-oauthorize","(consumer_key, consumer_secret)",""],["opts","WADL::CLI","WADL/CLI.html#method-i-opts","(opts)",""],["parse_arguments","WADL::CLI","WADL/CLI.html#method-i-parse_arguments","(arguments)",""],["parse_options","WADL::CLI","WADL/CLI.html#method-i-parse_options","(arguments)",""],["parse_query","WADL::CLI","WADL/CLI.html#method-i-parse_query","()",""],["paths","WADL::CheapSchema","WADL/CheapSchema.html#method-i-paths","(level = default = 0)",""],["post_opts","WADL::CLI","WADL/CLI.html#method-i-post_opts","(opts)",""],["prepare_request","WADL::HTTPRequest","WADL/HTTPRequest.html#method-i-prepare_request","(method, body, headers)",""],["query_string","WADL::URIParts","WADL/URIParts.html#method-i-query_string","()",""],["repeating?","WADL::Param","WADL/Param.html#method-i-repeating-3F","()",""],["representation_for","WADL::Resource","WADL/Resource.html#method-i-representation_for","(http_method, request = true, all = false)",""],["representation_of","WADL::XMLRepresentation","WADL/XMLRepresentation.html#method-i-representation_of","(format)",""],["require_oauth","WADL","WADL.html#method-c-require_oauth","(lib)",""],["required?","WADL::Param","WADL/Param.html#method-i-required-3F","()",""],["reset","WADL::CLI","WADL/CLI.html#method-i-reset","(stdin = STDIN, stdout = STDOUT, stderr = STDERR)",""],["resource","WADL::Application","WADL/Application.html#method-i-resource","(symbol)",""],["resource","WADL::CLI","WADL/CLI.html#method-i-resource","()",""],["resource","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-resource","(*args, &block)","<p>method_missing won&#39;t catch these guys because they were defined in the\ndelegation operation.\n"],["resource","WADL::ResourceContainer","WADL/ResourceContainer.html#method-i-resource","(name_or_id)",""],["resource_and_address","WADL::Resource","WADL/Resource.html#method-i-resource_and_address","(child = self, *args)",""],["response","WADL::HTTPMethod","WADL/HTTPMethod.html#method-i-response","()",""],["run","WADL::CLI","WADL/CLI.html#method-i-run","(arguments)",""],["set_headers","WADL::HTTPRequest","WADL/HTTPRequest.html#method-i-set_headers","(req, headers)",""],["set_oauth_header","WADL::HTTPRequest","WADL/HTTPRequest.html#method-i-set_oauth_header","(req, headers)",""],["start","WADL::HTTPRequest","WADL/HTTPRequest.html#method-i-start","()",""],["started?","WADL::HTTPRequest","WADL/HTTPRequest.html#method-i-started-3F","()",""],["subclass","WADL::FaultFormat","WADL/FaultFormat.html#method-i-subclass","()",""],["to_a","WADL::Version","WADL/Version.html#method-c-to_a","()","<p>Returns array representation.\n"],["to_s","WADL::Address","WADL/Address.html#method-i-to_s","()",""],["to_s","WADL::CheapSchema","WADL/CheapSchema.html#method-i-to_s","(indent = 0, is_collection = false)",""],["to_s","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-to_s","()",""],["to_s","WADL::URIParts","WADL/URIParts.html#method-i-to_s","()",""],["to_s","WADL::Version","WADL/Version.html#method-c-to_s","()","<p>Short-cut for version string.\n"],["to_str","WADL::URIParts","WADL/URIParts.html#method-i-to_str","()",""],["uri","WADL::Address","WADL/Address.html#method-i-uri","(args = {})",""],["uri","WADL::RequestFormat","WADL/RequestFormat.html#method-i-uri","(resource, args = {})","<p>Returns a URI and a set of HTTP headers for this request.\n"],["uri","WADL::Resource","WADL/Resource.html#method-i-uri","(args = {}, working_address = nil)",""],["uri","WADL::ResourceAndAddress","WADL/ResourceAndAddress.html#method-i-uri","(args = {})",""],["uri_escape","WADL::Param","WADL/Param.html#method-i-uri_escape","(v)",""],["usage","WADL::CLI","WADL/CLI.html#method-c-usage","(*)",""],["valid_oauth_args?","WADL::HTTPRequest","WADL/HTTPRequest.html#method-c-valid_oauth_args-3F","(args)",""],["with_basic_auth","WADL::Resource","WADL/Resource.html#method-i-with_basic_auth","(user, pass, header = 'Authorization')","<p>Sets basic auth parameters\n"],["with_oauth","WADL::Resource","WADL/Resource.html#method-i-with_oauth","(*args)","<p>Sets OAuth parameters\n<p>Args:\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">consumer_key</span>\n:<span class=\"ruby-identifier\">consumer_secret</span>\n:<span class=\"ruby-identifier\">access_token</span>\n:<span class=\"ruby-identifier\">token_secret</span>\n</pre>\n"],["COPYING","","COPYING.html","","<p>License for wadl\n\n<pre>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version ...</pre>\n"],["ChangeLog","","ChangeLog.html","","<p>Revision history for wadl\n<p>0.0.1 [2010-05-07]\n<p>Birthday :-)\n"],["README","","README.html","","<p>wadl - Ruby client for the Web Application Description Language.\n<p>VERSION\n<p>This documentation refers to wadl …\n"]]}}